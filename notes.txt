What is a struct?
- A struct is a collection of possibly different types of data. "An array of many types of data"

Example of a student struct:
    typedef struct{
        char lastName[20];
        char firstName[20];
        char initial;
        int id;
        double gpa;
    }student; //This is the name of the struct

So its like an object from javascript

you want to declare items inside a struct:
    student s1, s2={"jones", "tom", 'c', 456, 3.86}; 
    You can not re-assign it later on in the program. 

Use dot operator to access fields of the instanse of the student struct. You would use the name.field. So,
Example:
    s2.id = 789; //Here I have declared an ID inside my instance s2 of my student struct.
    strcpy(s2.firstName, "lucy");

    scanf(" %s", exampleStudent.firstName);
    scarf("%d", &eS.gpa); input is dependent on data type inside my struct. Considered as just a double because my gpa was prototyped as a double

Passing a struct into function example:
call the function and pass the student struct into it so Function(s1);
    void Function( Student examplesStudent){
        printf() // no magical way to print entire strut has to be split up into each section.
    };


can make an array with each "slot" in memory of the array as the whole list so,
    int num = 0;
    student list[5];
    list[0].id = 45;
    list[0].gpa = 4.0;
    list[1].id = 23;

Pointers to structs:
typedef struct{
    char lastName[20];
    int id;
    double gpa;
}student;
student Fill();
void FillPtr(student *sPtr);
int main(){
    student s1, s2, s3, s4, s5;
    s1=Fill(); s2=Fill();
    FillPtr(&s3); FillPtr(&S4);
}